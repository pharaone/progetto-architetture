version: "3.9"

services:
  # ================= Zookeeper =================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "cub", "zk-ready", "zookeeper:2181", "60"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [app-network]

  # ================= Kafka =================
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Listener interno (PLAINTEXT) su porta 29092
      # Listener esterno (PLAINTEXT_HOST) su porta 9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      # Il check usa la porta interna 29092
      test: ["CMD", "cub", "kafka-ready", "-b", "kafka:29092", "1", "60"]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks: [app-network]

# ================= Volumi =================
volumes:
  kafka_data:

# ================= Rete =================
networks:
  app-network:
    driver: bridge
    name: app-network # Diamo un nome esplicito alla rete